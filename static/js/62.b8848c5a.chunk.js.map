{"version":3,"sources":["utility/permissions/ability.js","utility/permissions/can.js","components/@vuexy/breadCrumbs/BreadCrumb.js","views/pages/MainDataTable/TableCustomHeader.js","utility/dateAndTime.js","views/pages/Setups/CategoryTypes/Tables/CategoryTypesTable.js","views/pages/Setups/CategoryTypes/Modals/CategoryTypesModal.js","views/pages/Setups/CategoryTypes/CategoryTypes.js"],"names":["currentAuthUser","ability","Ability","AbilityBuilder","can","rules","defineRulesFor","user","USER_GROUPS","canArr","length","forEach","user_group","GROUP_ROLES","group_role","ACTIVE","READ_PERMISSION","push","ROLE","ROLE_NAME","CREATE_PERMISSION","UPDATE_PERMISSION","DELETE_PERMISSION","PRINT_PERMISSION","APPROVE_PERMISSION","generateUserAbilities","store","getState","auth","update","createCanBoundTo","BreadCrumbs","className","this","props","breadCrumbTitle","tag","to","size","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","active","breadCrumbActive","color","style","left","right","React","Component","TableCustomHeader","I","a","role","passThrough","allowed","Ripple","disabled","onClick","handleShow","value","onChange","e","handleFilter","ShowDate","today","Date","dd","String","getDate","padStart","mm","getMonth","getFullYear","CategoryTypesTable","tableProperties","columns","name","cell","row","Button","handleEdit","handleDelete","selector","sortable","DESCRIPTION","data","filteredData","noHeader","pagination","subHeader","striped","subHeaderComponent","CategoryTypesModal","Modal","show","onHide","handleHide","Header","closeButton","Title","id","InsertUpdate","Form","onSubmit","handleSubmit","autoComplete","Body","Group","controlId","Label","Control","type","placeholder","Description","changeDescription","required","Footer","variant","isEnabled","showdelete","handleHideDelete","readOnly","CategoryTypes","context","event","preventDefault","form","state","CREATEDBYID","LASTMODIFIEDBYID","DATECREATED","DATELASTMODIFIED","formEdit","ID","API","then","clearData","populateData","toastr","success","catch","error","response","request","info","formDelete","warning","handleEditData","setState","handleDeleteData","target","filter","item","startsWithCondition","toString","toLowerCase","startsWith","includesCondition","includes","Helmet","Fragment","Row","Col","sm","Card","CardHeader","CardTitle","CardBody","constructor","connect"],"mappings":"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","file":"static/js/62.b8848c5a.chunk.js","sourcesContent":["\nimport { Ability, AbilityBuilder } from '@casl/ability';\n\nimport { store } from '../../redux/storeConfig/store'\n\nconst ability = new Ability([])\nconst { can, rules } = new AbilityBuilder();\n\nfunction generateUserAbilities(USER_GROUPS) {\n  let canArr = [];\n\n  if (USER_GROUPS.length > 0) {\n    USER_GROUPS.forEach(user_group => {\n      if (user_group.GROUP_ROLES.length > 0) {\n        user_group.GROUP_ROLES.forEach(group_role => {\n          if (group_role.ACTIVE){\n            if (group_role.READ_PERMISSION) { canArr.push(can(\"read\", group_role.ROLE.ROLE_NAME, group_role.READ_PERMISSION)); }\n            if (group_role.CREATE_PERMISSION) { canArr.push(can(\"create\", group_role.ROLE.ROLE_NAME, group_role.CREATE_PERMISSION)); }\n            if (group_role.UPDATE_PERMISSION) { canArr.push(can(\"update\", group_role.ROLE.ROLE_NAME, group_role.UPDATE_PERMISSION)); }\n            if (group_role.DELETE_PERMISSION) { canArr.push(can(\"delete\", group_role.ROLE.ROLE_NAME, group_role.DELETE_PERMISSION)); }\n            if (group_role.PRINT_PERMISSION) { canArr.push(can(\"print\", group_role.ROLE.ROLE_NAME, group_role.PRINT_PERMISSION)); }\n            if (group_role.APPROVE_PERMISSION) { canArr.push(can(\"approve\", group_role.ROLE.ROLE_NAME, group_role.APPROVE_PERMISSION)); }\n          }\n        });\n      }\n    });\n  }\n\n  return canArr;\n}\n\nfunction defineRulesFor(user) {\n  //console.log(user);\n  if (user) {\n    generateUserAbilities(user.USER_GROUPS)\n  }\n\n  return rules\n}\n\nlet currentAuthUser;\n(() => {\n  const prevAuth = currentAuthUser;\n  currentAuthUser = store.getState().auth.user;\n\n  if (prevAuth !== currentAuthUser) {\n    ability.update(defineRulesFor(currentAuthUser));\n  }\n})();\n\nexport default ability;","import { createCanBoundTo } from '@casl/react';\nimport ability from './ability';\n \nexport default createCanBoundTo(ability)","import React from \"react\"\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from \"reactstrap\"\nimport { Home, Settings } from \"react-feather\"\nimport { NavLink } from \"react-router-dom\"\nclass BreadCrumbs extends React.Component {\n  render() {\n    return (\n      <div className=\"content-header row\">\n        <div className=\"content-header-left col-md-9 col-12\">\n          <div className=\"row breadcrumbs-top\">\n            <div className=\"col-12\">\n              {this.props.breadCrumbTitle ? (\n                <h2 className=\"content-header-title float-left mb-0\">\n                  {this.props.breadCrumbTitle}\n                </h2>\n              ) : (\n                \"\"\n              )}\n              <div className=\"breadcrumb-wrapper vx-breadcrumbs d-sm-block d-none col-12\">\n                <Breadcrumb tag=\"ol\">\n                  <BreadcrumbItem tag=\"li\">\n                    <NavLink to=\"/\">\n                      <Home className=\"align-top\" size={15} />\n                    </NavLink>\n                  </BreadcrumbItem>\n                  <BreadcrumbItem tag=\"li\" className=\"text-primary\">\n                    {this.props.breadCrumbParent}\n                  </BreadcrumbItem>\n                  {this.props.breadCrumbParent2 ? (\n                    <BreadcrumbItem tag=\"li\" className=\"text-primary\">\n                      {this.props.breadCrumbParent2}\n                    </BreadcrumbItem>\n                  ) : (\n                    \"\"\n                  )}\n                  {this.props.breadCrumbParent3 ? (\n                    <BreadcrumbItem tag=\"li\" className=\"text-primary\">\n                      {this.props.breadCrumbParent3}\n                    </BreadcrumbItem>\n                  ) : (\n                    \"\"\n                  )}\n                  <BreadcrumbItem tag=\"li\" active>\n                    {this.props.breadCrumbActive}\n                  </BreadcrumbItem>\n                </Breadcrumb>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"content-header-right text-md-right col-md-3 col-12 d-md-block d-none\">\n          <div className=\"breadcrum-right dropdown\">\n            <UncontrolledButtonDropdown>\n              <DropdownToggle\n                color=\"primary\"\n                size=\"sm\"\n                className=\"btn-icon btn-round dropdown-toggle\"\n              >\n                <Settings\n                  size={14}\n                  style={{\n                    left: 0\n                  }}\n                />\n              </DropdownToggle>\n              <DropdownMenu tag=\"ul\" right>\n                <DropdownItem tag=\"li\">\n                  <NavLink className=\"text-dark w-100\" to=\"/chat\">\n                    Chat\n                  </NavLink>\n                </DropdownItem>\n                <DropdownItem tag=\"li\">\n                  <NavLink className=\"text-dark w-100\" to=\"/email/inbox\">\n                    Email\n                  </NavLink>\n                </DropdownItem>\n                <DropdownItem tag=\"li\">\n                  <NavLink className=\"text-dark w-100\" to=\"/calendar\">\n                    Calendar\n                  </NavLink>\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledButtonDropdown>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default BreadCrumbs\n","\nimport React from \"react\"\nimport {\n  Input,\n  Button,\n} from \"reactstrap\"\nimport { Search } from \"react-feather\"\nimport Can from '../../../utility/permissions/can';\n\nconst TableCustomHeader = props => {\n  return (\n    <div className=\"d-flex flex-wrap justify-content-between w-100\">\n      <div className=\"add-new\">\n      <Can I=\"create\" a={props.role} passThrough>\n          { allowed => <Button.Ripple disabled={!allowed} className=\"mr-1 mb-1 bg-gradient-primary round\" color=\"none\" onClick={props.handleShow}>Add New</Button.Ripple> }\n        </Can>\n      </div>\n      <div className=\"position-relative has-icon-left mb-1\">\n        <Input value={props.value} onChange={e => props.handleFilter(e)} />\n        <div className=\"form-control-position\">\n          <Search size=\"15\" />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TableCustomHeader\n","\nexport function ShowDate() {\n\n  let today = new Date();\n  let dd = String(today.getDate()).padStart(2, '0');\n  let mm = String(today.getMonth() + 1).padStart(2, '0');\n  let yyyy = today.getFullYear();\n\n  return yyyy + '-' + mm + '-' + dd;\n}\n\n\nexport function ShowTime() {\n\n  let today = new Date();\n  let time = today.getHours() + \":\" + today.getMinutes();\n\n  return time;\n}\n","import React from \"react\"\nimport { Button } from \"reactstrap\"\nimport DataTable from \"react-data-table-component\"\nimport TableCustomHeader from \"../../../MainDataTable/TableCustomHeader\";\nimport { Edit, Trash2 } from \"react-feather\";\nimport Can from '../../../../../utility/permissions/can';\nclass CategoryTypesTable extends React.Component {\n\n    tableProperties = {\n        columns: [\n            {\n                name: \"Action\",\n                cell: (row) => (\n                    <>\n                        <Can I=\"update\" a={this.props.role} passThrough>\n                            { allowed => \n                                <Button.Ripple className=\"mr-1 mb-1 bg-gradient-success\" size=\"sm\" color=\"none\"\n                                    disabled={!allowed}\n                                    onClick={() => this.props.handleEdit(row)}\n                                >\n                                    <Edit size={14} />\n                                </Button.Ripple>\n                            }\n                        </Can>\n\n                        <Can I=\"delete\" a={this.props.role} passThrough>\n                            { allowed => \n                                <Button.Ripple className=\"mr-1 mb-1  bg-gradient-danger\" size=\"sm\" color=\"none\"\n                                    disabled={!allowed}\n                                    onClick={() => this.props.handleDelete(row)}\n                                ><Trash2 size={14} />\n                                </Button.Ripple>\n                            }\n                        </Can>\n                    </>\n                )\n            },\n            {\n                name: \"Description\",\n                selector: \"DESCRIPTION\",\n                sortable: true,\n                cell: row => <p className=\"mb-0\">{row.DESCRIPTION}</p>\n            }\n        ]\n    }\n\n    render() {\n        return (\n            <>\n                <DataTable\n                    className=\"dataTable-custom\"\n                    data={this.props.value.length ? this.props.filteredData : this.props.data}\n                    columns={this.tableProperties.columns}\n                    noHeader\n                    pagination\n                    subHeader\n                    striped\n                    subHeaderComponent={\n                        <TableCustomHeader role={this.props.role} value={this.props.value} handleShow={this.props.handleShow} handleFilter={this.props.handleFilter} />\n\n                    }\n                />\n            </>\n        )\n    }\n}\nexport default CategoryTypesTable","import React from 'react';\nimport { Button, Modal, Form } from 'react-bootstrap';\n\nclass CategoryTypesModal extends React.Component {\n    render() {\n        return (\n            <div>\n                <Modal\n                    show={this.props.show}\n                    onHide={this.props.handleHide}\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"AddUpdate\">\n                            {this.props.InsertUpdate} Category Type\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Form onSubmit={this.props.handleSubmit} autoComplete=\"off\">\n                        <Modal.Body>\n\n                            <Form.Group controlId=\"Description\">\n                                <Form.Label>Description</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Enter Description\" value={this.props.Description} onChange={this.props.changeDescription} required />\n                            </Form.Group>\n\n                        </Modal.Body>\n\n                        <Modal.Footer>\n                            <Button variant=\"success\" onClick={this.props.handleHide}>\n                                Cancel\n                            </Button>\n                            <Button variant=\"primary\" type=\"submit\" disabled={this.props.isEnabled}>\n                                {this.props.InsertUpdate}\n                            </Button>\n                        </Modal.Footer>\n                    </Form>\n                </Modal>\n                <Modal\n                    show={this.props.showdelete}\n                    onHide={this.props.handleHideDelete}\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"AddUpdate\">\n                            Delete Category Type\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Form onSubmit={this.props.handleDelete} autoComplete=\"off\">\n                        <Modal.Body>\n                            <Form.Group controlId=\"description\">\n                                <h4>Are you sure you want to delete this record?</h4>\n                                <Form.Control type=\"text\" placeholder=\"Click Delete Button\" value={this.props.Description} onChange={this.props.changeDescription} readOnly />\n                            </Form.Group>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"success\" onClick={this.props.handleHideDelete}>\n                                Cancel\n                            </Button>\n                            <Button variant=\"primary\" type=\"submit\">\n                                Yes Delete\n                            </Button>\n                        </Modal.Footer>\n                    </Form>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default CategoryTypesModal;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Helmet } from 'react-helmet';\nimport { Card, CardBody, CardHeader, CardTitle, Row, Col } from \"reactstrap\"\nimport Breadcrumbs from \"../../../../components/@vuexy/breadCrumbs/BreadCrumb\"\nimport CategoryTypesTable from './Tables/CategoryTypesTable';\nimport CategoryTypesModal from './Modals/CategoryTypesModal';\nimport * as API from \"../../../../utility/crud/app.crud\";\nimport * as Date from \"../../../../utility/dateAndTime\";\nimport { toastr } from 'react-redux-toastr';\n\nclass CategoryTypes extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            columns: [],\n            data: [],\n            filteredData: [],\n            value: '',\n            show: false,\n            showdelete: false,\n            ID: 0,\n            DESCRIPTION: '',\n            CREATEDBYID: 1,\n            LASTMODIFIEDBYID: 1,\n            DATECREATED: Date.ShowDate(),\n            DATELASTMODIFIED: Date.ShowDate(),\n            InsertUpdate: ''\n\n        }\n        this.handleShow = () => {\n            this.setState({\n                show: true,\n                InsertUpdate: 'Insert'\n            });\n            this.clearData();\n        }\n\n        this.handleHide = () => {\n            this.setState({\n                show: false\n            });\n        }\n\n        this.handleHideDelete = () => {\n            this.setState({\n                showdelete: false\n            });\n        }\n\n        this.populateData();\n    }\n\n    populateData() {\n        const getdata = `\n            query{\n                CategoryTypes{\n                    ID\n                    DESCRIPTION\n                    CREATEDBYID\n                    LASTMODIFIEDBYID\n                    DATECREATED\n                    DATELASTMODIFIED\n                }\n            }\n        `;\n\n        API.getData(getdata)\n            .then(({ data }) => this.setState({\n                data: data.data.CategoryTypes\n            })).catch(error => {\n                if (error.response || error.request) {\n                    toastr.error('Error Loading Data', 'Failed to Load Data');\n                }\n            })\n\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        const form = `\n        mutation{\n            addCategoryType(\n                DESCRIPTION:\"${this.state.DESCRIPTION}\",\n                CREATEDBYID:${this.state.CREATEDBYID},\n                LASTMODIFIEDBYID:${this.state.LASTMODIFIEDBYID},\n                DATECREATED:\"${this.state.DATECREATED}\",\n                DATELASTMODIFIED:\"${this.state.DATELASTMODIFIED}\"\n                ){\n                ID\n            }\n        }\n        `;\n\n        const formEdit = `\n        mutation{\n            updateCategoryType(\n                ID:${this.state.ID},\n                DESCRIPTION:\"${this.state.DESCRIPTION}\",\n                LASTMODIFIEDBYID:${this.state.LASTMODIFIEDBYID},\n                DATELASTMODIFIED:\"${this.state.DATELASTMODIFIED}\"\n                ){\n                ID\n            }\n        }\n        `;\n        //console.log(form);\n        if (this.state.InsertUpdate === 'Insert') {\n            API.create(form)\n                .then(() => {\n                    this.clearData();\n                    this.handleHide();\n                    this.populateData();\n                    toastr.success('Create Record', 'Record Created Successfully');\n                }).catch(error => {\n                    if (error.response || error.request) {\n                        toastr.error('Error Loading Data', 'Failed to Load Data');\n                    }\n                })\n        } else {\n            API.update(formEdit)\n                .then(() => {\n                    this.clearData();\n                    this.handleHide();\n                    this.populateData();\n                    toastr.info('Update Record', 'Record Updated Successfully');\n                }).catch(error => {\n                    if (error.response || error.request) {\n                        toastr.error('Error Loading Data', 'Failed to Load Data');\n                    }\n                })\n        }\n\n    }\n\n    handleDelete = (event) => {\n        event.preventDefault();\n\n        const formDelete = `\n        mutation{\n            deleteCategoryType(\n                ID:${this.state.ID}\n                ){\n                ID\n            }\n        }\n        `;\n\n        API.remove(formDelete)\n            .then(() => {\n                this.handleHideDelete();\n                this.populateData();\n                toastr.warning('Delete Record', 'Record Deleted Successfully');\n            }).catch(error => {\n                if (error.response || error.request) {\n                    toastr.error('Error Loading Data', 'Failed to Load Data');\n                }\n            })\n    }\n\n    handleEditData = (e) => {\n        this.setState({\n            ID: e.ID,\n            DESCRIPTION: e.DESCRIPTION,\n            show: true,\n            InsertUpdate: 'Update'\n        })\n    }\n\n    handleDeleteData = (e) => {\n        this.setState({\n            ID: e.ID,\n            DESCRIPTION: e.DESCRIPTION,\n            showdelete: true,\n            InsertUpdate: 'Delete'\n        })\n    }\n\n    clearData() {\n        this.setState({\n            DESCRIPTION: '',\n        })\n    }\n\n    handleFilter = (e) => {\n        let value = e.target.value\n        let data = this.state.data\n        let filteredData = this.state.filteredData\n        this.setState({ value });\n\n        if (value.length) {\n            filteredData = data.filter(item => {\n                let startsWithCondition =\n                    item.DESCRIPTION.toString().toLowerCase().startsWith(value.toLowerCase())\n\n                let includesCondition =\n                    item.DESCRIPTION.toString().toLowerCase().includes(value.toLowerCase())\n\n                if (startsWithCondition) {\n                    return startsWithCondition\n                } else if (!startsWithCondition && includesCondition) {\n                    return includesCondition\n                } else return null\n            })\n            this.setState({ filteredData })\n        }\n    }\n\n    render() {\n        const { data, columns, value, filteredData } = this.state\n        return (\n            <>\n                <Helmet><title>Category Types</title></Helmet>\n                <React.Fragment>\n                    <Breadcrumbs\n                        breadCrumbTitle=\"Admin\"\n                        breadCrumbParent=\"Setup\"\n                        breadCrumbActive=\"Category Types\"\n                    />\n                    <Row>\n                        <Col sm=\"12\">\n                            <Card>\n                                <CardHeader>\n                                    <CardTitle>Category Types</CardTitle>\n                                </CardHeader>\n                                <CardBody className=\"rdt_Wrapper\">\n\n                                    <CategoryTypesTable\n                                        role={this.constructor.name}\n                                        handleEdit={this.handleEditData}\n                                        handleDelete={this.handleDeleteData}\n                                        value={value}\n                                        data={data}\n                                        columns={columns}\n                                        filteredData={filteredData}\n                                        handleShow={this.handleShow}\n                                        handleFilter={this.handleFilter}\n                                    />\n\n                                    <CategoryTypesModal\n                                        show={this.state.show}\n                                        handleHide={this.handleHide}\n                                        InsertUpdate={this.state.InsertUpdate}\n                                        handleSubmit={this.handleSubmit}\n                                        Description={this.state.DESCRIPTION}\n                                        changeDescription={e => this.setState({ DESCRIPTION: e.target.value })}\n                                        showdelete={this.state.showdelete}\n                                        handleHideDelete={this.handleHideDelete}\n                                        handleDelete={this.handleDelete}\n                                    />\n\n\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n\n                </React.Fragment>\n            </>\n        )\n    }\n\n}\n\nconst mapStateToProps = ({ auth: { user } }) => ({\n    user\n});\n\nexport default (connect(mapStateToProps)(CategoryTypes));\n"],"sourceRoot":""}