{"version":3,"sources":["utility/permissions/ability.js","utility/permissions/can.js","components/@vuexy/breadCrumbs/BreadCrumb.js","views/pages/MainDataTable/TableCustomHeader.js","utility/dateAndTime.js","views/pages/Security/Groups/Tables/GroupsTable.js","views/pages/Security/Groups/Modals/GroupsModal.js","views/pages/Security/Groups/Groups.js"],"names":["currentAuthUser","ability","Ability","AbilityBuilder","can","rules","defineRulesFor","user","USER_GROUPS","canArr","length","forEach","user_group","GROUP_ROLES","group_role","ACTIVE","READ_PERMISSION","push","ROLE","ROLE_NAME","CREATE_PERMISSION","UPDATE_PERMISSION","DELETE_PERMISSION","PRINT_PERMISSION","APPROVE_PERMISSION","generateUserAbilities","store","getState","auth","update","createCanBoundTo","BreadCrumbs","className","this","props","breadCrumbTitle","tag","to","size","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","active","breadCrumbActive","color","style","left","right","React","Component","TableCustomHeader","I","a","role","passThrough","allowed","Ripple","disabled","onClick","handleShow","value","onChange","e","handleFilter","ShowDate","today","Date","dd","String","getDate","padStart","mm","getMonth","getFullYear","GroupsTable","tableProperties","columns","name","cell","row","Button","handleEdit","handleDelete","selector","sortable","GROUP_NAME","data","filteredData","noHeader","pagination","subHeader","striped","subHeaderComponent","GroupsModal","Modal","show","onHide","handleHide","Header","closeButton","Title","id","InsertUpdate","Form","onSubmit","handleSubmit","autoComplete","Body","Group","as","Col","md","controlId","Label","Control","type","placeholder","group_name","changegroup_name","required","marginTop","overflowY","maxHeight","roleFilterText","onFilterRolesChange","nodes","filteredgrouprolesdata","grouprolesdata","showExpandAll","checked","checkedRoles","expanded","expandedRoles","onCheck","handleCheckRole","onExpand","handleExpandRole","Footer","variant","isEnabled","showdelete","handleHideDelete","readOnly","Groups","filterRolesTree","state","filteredgrouproles","label","toLocaleLowerCase","indexOf","setState","prevState","event","preventDefault","addGroupQuery","CREATED_BY","MODIFIED_BY","CREATED_DATE","MODIFIED_DATE","API","then","GROUP_ID","addGroup","allRolesIds","rolesdata","map","groupRoles","checkedRolesIds","checked_roles","splitrole","split","Array","isArray","roledetails","hasOwnProperty","includes","filter","ROLE_ID","addGroupRoleQuery","clearData","populateData","toastr","success","catch","error","response","request","console","insertGroupRoles","updateGroupRoles","updateQueries","log","info","formDelete","warning","handleEditData","allrolegroups","groupRolesIds","firstRoles","lastRoles","newRolesRoles","new","GROUP_ROLE_ID","children","handleDeleteData","target","item","startsWithCondition","toString","toLowerCase","startsWith","includesCondition","EMAIL","roleGroups","roles","Roles","Helmet","Fragment","Row","sm","Card","CardHeader","CardTitle","CardBody","constructor","connect"],"mappings":"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","file":"static/js/60.3e1a884b.chunk.js","sourcesContent":["\nimport { Ability, AbilityBuilder } from '@casl/ability';\n\nimport { store } from '../../redux/storeConfig/store'\n\nconst ability = new Ability([])\nconst { can, rules } = new AbilityBuilder();\n\nfunction generateUserAbilities(USER_GROUPS) {\n  let canArr = [];\n\n  if (USER_GROUPS.length > 0) {\n    USER_GROUPS.forEach(user_group => {\n      if (user_group.GROUP_ROLES.length > 0) {\n        user_group.GROUP_ROLES.forEach(group_role => {\n          if (group_role.ACTIVE){\n            if (group_role.READ_PERMISSION) { canArr.push(can(\"read\", group_role.ROLE.ROLE_NAME, group_role.READ_PERMISSION)); }\n            if (group_role.CREATE_PERMISSION) { canArr.push(can(\"create\", group_role.ROLE.ROLE_NAME, group_role.CREATE_PERMISSION)); }\n            if (group_role.UPDATE_PERMISSION) { canArr.push(can(\"update\", group_role.ROLE.ROLE_NAME, group_role.UPDATE_PERMISSION)); }\n            if (group_role.DELETE_PERMISSION) { canArr.push(can(\"delete\", group_role.ROLE.ROLE_NAME, group_role.DELETE_PERMISSION)); }\n            if (group_role.PRINT_PERMISSION) { canArr.push(can(\"print\", group_role.ROLE.ROLE_NAME, group_role.PRINT_PERMISSION)); }\n            if (group_role.APPROVE_PERMISSION) { canArr.push(can(\"approve\", group_role.ROLE.ROLE_NAME, group_role.APPROVE_PERMISSION)); }\n          }\n        });\n      }\n    });\n  }\n\n  return canArr;\n}\n\nfunction defineRulesFor(user) {\n  //console.log(user);\n  if (user) {\n    generateUserAbilities(user.USER_GROUPS)\n  }\n\n  return rules\n}\n\nlet currentAuthUser;\n(() => {\n  const prevAuth = currentAuthUser;\n  currentAuthUser = store.getState().auth.user;\n\n  if (prevAuth !== currentAuthUser) {\n    ability.update(defineRulesFor(currentAuthUser));\n  }\n})();\n\nexport default ability;","import { createCanBoundTo } from '@casl/react';\nimport ability from './ability';\n \nexport default createCanBoundTo(ability)","import React from \"react\"\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from \"reactstrap\"\nimport { Home, Settings } from \"react-feather\"\nimport { NavLink } from \"react-router-dom\"\nclass BreadCrumbs extends React.Component {\n  render() {\n    return (\n      <div className=\"content-header row\">\n        <div className=\"content-header-left col-md-9 col-12\">\n          <div className=\"row breadcrumbs-top\">\n            <div className=\"col-12\">\n              {this.props.breadCrumbTitle ? (\n                <h2 className=\"content-header-title float-left mb-0\">\n                  {this.props.breadCrumbTitle}\n                </h2>\n              ) : (\n                \"\"\n              )}\n              <div className=\"breadcrumb-wrapper vx-breadcrumbs d-sm-block d-none col-12\">\n                <Breadcrumb tag=\"ol\">\n                  <BreadcrumbItem tag=\"li\">\n                    <NavLink to=\"/\">\n                      <Home className=\"align-top\" size={15} />\n                    </NavLink>\n                  </BreadcrumbItem>\n                  <BreadcrumbItem tag=\"li\" className=\"text-primary\">\n                    {this.props.breadCrumbParent}\n                  </BreadcrumbItem>\n                  {this.props.breadCrumbParent2 ? (\n                    <BreadcrumbItem tag=\"li\" className=\"text-primary\">\n                      {this.props.breadCrumbParent2}\n                    </BreadcrumbItem>\n                  ) : (\n                    \"\"\n                  )}\n                  {this.props.breadCrumbParent3 ? (\n                    <BreadcrumbItem tag=\"li\" className=\"text-primary\">\n                      {this.props.breadCrumbParent3}\n                    </BreadcrumbItem>\n                  ) : (\n                    \"\"\n                  )}\n                  <BreadcrumbItem tag=\"li\" active>\n                    {this.props.breadCrumbActive}\n                  </BreadcrumbItem>\n                </Breadcrumb>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"content-header-right text-md-right col-md-3 col-12 d-md-block d-none\">\n          <div className=\"breadcrum-right dropdown\">\n            <UncontrolledButtonDropdown>\n              <DropdownToggle\n                color=\"primary\"\n                size=\"sm\"\n                className=\"btn-icon btn-round dropdown-toggle\"\n              >\n                <Settings\n                  size={14}\n                  style={{\n                    left: 0\n                  }}\n                />\n              </DropdownToggle>\n              <DropdownMenu tag=\"ul\" right>\n                <DropdownItem tag=\"li\">\n                  <NavLink className=\"text-dark w-100\" to=\"/chat\">\n                    Chat\n                  </NavLink>\n                </DropdownItem>\n                <DropdownItem tag=\"li\">\n                  <NavLink className=\"text-dark w-100\" to=\"/email/inbox\">\n                    Email\n                  </NavLink>\n                </DropdownItem>\n                <DropdownItem tag=\"li\">\n                  <NavLink className=\"text-dark w-100\" to=\"/calendar\">\n                    Calendar\n                  </NavLink>\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledButtonDropdown>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default BreadCrumbs\n","\nimport React from \"react\"\nimport {\n  Input,\n  Button,\n} from \"reactstrap\"\nimport { Search } from \"react-feather\"\nimport Can from '../../../utility/permissions/can';\n\nconst TableCustomHeader = props => {\n  return (\n    <div className=\"d-flex flex-wrap justify-content-between w-100\">\n      <div className=\"add-new\">\n      <Can I=\"create\" a={props.role} passThrough>\n          { allowed => <Button.Ripple disabled={!allowed} className=\"mr-1 mb-1 bg-gradient-primary round\" color=\"none\" onClick={props.handleShow}>Add New</Button.Ripple> }\n        </Can>\n      </div>\n      <div className=\"position-relative has-icon-left mb-1\">\n        <Input value={props.value} onChange={e => props.handleFilter(e)} />\n        <div className=\"form-control-position\">\n          <Search size=\"15\" />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TableCustomHeader\n","\nexport function ShowDate() {\n\n  let today = new Date();\n  let dd = String(today.getDate()).padStart(2, '0');\n  let mm = String(today.getMonth() + 1).padStart(2, '0');\n  let yyyy = today.getFullYear();\n\n  return yyyy + '-' + mm + '-' + dd;\n}\n\n\nexport function ShowTime() {\n\n  let today = new Date();\n  let time = today.getHours() + \":\" + today.getMinutes();\n\n  return time;\n}\n","import React from \"react\"\nimport {\n    Button\n} from \"reactstrap\"\nimport DataTable from \"react-data-table-component\"\nimport TableCustomHeader from \"../../../MainDataTable/TableCustomHeader\";\nimport { Edit, Trash2 } from \"react-feather\"\n\nimport Can from '../../../../../utility/permissions/can';\n\nclass GroupsTable extends React.Component {\n\n    tableProperties = {\n        columns: [\n            {\n                name: \"Action\",\n                cell: (row) => (\n                    <>\n\n                        <Can I=\"update\" a={this.props.role} passThrough>\n                            { allowed => \n                                <Button.Ripple className=\"mr-1 mb-1 bg-gradient-success\" size=\"sm\" color=\"none\"\n                                    disabled={!allowed}\n                                    onClick={() => this.props.handleEdit(row)}\n                                >\n                                    <Edit size={14} />\n                                </Button.Ripple>\n                            }\n                        </Can>\n\n                        <Can I=\"delete\" a={this.props.role} passThrough>\n                            { allowed => \n                                <Button.Ripple className=\"mr-1 mb-1  bg-gradient-danger\" size=\"sm\" color=\"none\"\n                                    disabled={!allowed}\n                                    onClick={() => this.props.handleDelete(row)}\n                                ><Trash2 size={14} />\n                                </Button.Ripple>\n                            }\n                        </Can>\n\n                        \n                    </>\n                )\n            },\n            {\n                name: \"Group Name\",\n                selector: \"GROUP_NAME\",\n                sortable: true,\n                cell: row => <p className=\"mb-0\">{row.GROUP_NAME}</p>\n            }\n        ]\n    }\n\n    render() {\n\n        return (\n            <>\n            <DataTable\n                className=\"dataTable-custom\"\n                data={this.props.value.length ? this.props.filteredData : this.props.data}\n                columns={this.tableProperties.columns}\n                noHeader\n                pagination\n                subHeader\n                striped\n                subHeaderComponent={\n                    <TableCustomHeader role={this.props.role} value={this.props.value} handleShow={this.props.handleShow} handleFilter={this.props.handleFilter} />\n\n                }\n            />\n            </>\n\n        )\n    }\n}\n\n\nexport default GroupsTable","import React from 'react';\nimport CheckboxTree from 'react-checkbox-tree';\nimport { Button, Modal, Form, Col, Row, Card } from 'react-bootstrap';\n\nclass GroupsModal extends React.Component {\n    render() {\n        return (\n            <div>\n                <Modal\n                    show={this.props.show}\n                    onHide={this.props.handleHide}\n                    size=\"lg\"\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"AddUpdate\">\n                            {this.props.InsertUpdate} Group\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Form onSubmit={this.props.handleSubmit} autoComplete=\"off\">\n                        <Modal.Body>\n                            \n                            <Form.Group as={Col} md=\"6\" controlId=\"group_name\">\n                                <Form.Label>Group Name</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Enter Group Name\" value={this.props.group_name} onChange={this.props.changegroup_name} required/>\n                            </Form.Group>\n\n                            <Row>\n                                <Col className=\"ml-1 mr-1\">\n                                    <h6>Employee Roles</h6>\n                                    <Card style={{marginTop:'10px', overflowY : 'scroll', maxHeight: '400px'}}>\n                                        <Card.Body>\n\n                                            <Form.Group as={Col} md=\"12\" controlId=\"roleSearch\">\n                                                <Form.Control\n                                                    className=\"filter-text\"\n                                                    placeholder=\"Search Role...\"\n                                                    type=\"text\"\n                                                    value={this.props.roleFilterText}\n                                                    onChange={this.props.onFilterRolesChange}\n                                                />\n                                            </Form.Group>\n\n                                            <CheckboxTree\n                                                nodes={this.props.filteredgrouprolesdata.length > 0 ? this.props.filteredgrouprolesdata : this.props.grouprolesdata}\n                                                showExpandAll={true}\n                                                checked={this.props.checkedRoles}\n                                                expanded={this.props.expandedRoles}\n                                                onCheck={this.props.handleCheckRole}\n                                                onExpand={this.props.handleExpandRole}\n                                            />\n\n                                        </Card.Body>\n                                    </Card>\n                                </Col>\n                            </Row>\n                            \n                        </Modal.Body>\n\n                        <Modal.Footer>\n                            <Button variant=\"success\" onClick={this.props.handleHide}>\n                                Cancel\n                            </Button>\n                            <Button variant=\"primary\" type=\"submit\" disabled={this.props.isEnabled}>\n                                {this.props.InsertUpdate}\n                            </Button>\n                        </Modal.Footer>\n                    </Form>\n                </Modal>\n\n                <Modal\n                    show={this.props.showdelete}\n                    onHide={this.props.handleHideDelete}\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"AddUpdate\">\n                            Delete Group\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Form onSubmit={this.props.handleDelete} autoComplete=\"off\">\n                        <Modal.Body>\n                            <Form.Group controlId=\"group_name_del\">\n                                <h4>Are you sure you want to delete this record?</h4>\n                                <Form.Control type=\"text\" placeholder=\"Click Delete Button\" value={this.props.group_name} onChange={this.props.changegroup_name} readOnly />\n                            </Form.Group>\n                        </Modal.Body>\n\n                        <Modal.Footer>\n                            <Button variant=\"success\" onClick={this.props.handleHideDelete}>\n                                Cancel\n                            </Button>\n                            <Button variant=\"primary\" type=\"submit\">\n                                Yes Delete\n                            </Button>\n                        </Modal.Footer>\n                    </Form>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default GroupsModal;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Helmet } from 'react-helmet';\nimport { Card, CardBody, CardHeader, CardTitle, Row, Col } from \"reactstrap\"\nimport Breadcrumbs from \"../../../../components/@vuexy/breadCrumbs/BreadCrumb\"\nimport GroupsTable from './Tables/GroupsTable';\nimport GroupsModal from './Modals/GroupsModal'\nimport * as API from \"../../../../utility/crud/app.crud\";\nimport * as Date from \"../../../../utility/dateAndTime\";\nimport { toastr } from 'react-redux-toastr'\n\nclass Groups extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: [],\n            data: [],\n            filteredData: [],\n            value: '',\n            show: false,\n            showdelete: false,\n            GROUP_ID: 0,\n            GROUP_NAME: '',\n            rolesdata: [],\n            grouprolesdata: [],\n            checkedRoles: [],\n            expandedRoles: [],\n            filteredgrouprolesdata: [],\n            allrolegroups: [],\n            CREATED_BY: props.user.EMAIL,\n            MODIFIED_BY: props.user.EMAIL,\n            CREATED_DATE: Date.ShowDate(),\n            MODIFIED_DATE: Date.ShowDate(),\n            InsertUpdate: ''\n        }\n\n        this.handleShow = () => {\n            const expandedRoles = this.state.rolesdata.map(role => role.value)\n            this.setState({\n                show: true,\n                grouprolesdata: this.state.rolesdata,\n                expandedRoles,\n                InsertUpdate: 'Insert'\n            });\n            this.clearData();\n        }\n\n        this.handleHide = () => {\n            this.setState({\n                show: false,\n                checkedRoles: [],\n            });\n        }\n\n        this.handleHideDelete = () => {\n            this.setState({\n                showdelete: false\n            });\n        }\n\n        this.populateData();\n\n    }\n\n    filterRolesTree = () => {\n\n        // Reset nodes back to unfiltered state\n        if (!this.state.roleFilterText) {\n            this.setState((prevState) => ({\n                filteredgrouprolesdata: this.state.grouprolesdata,\n            }));\n\n            return;\n        }\n\n        let filteredgrouproles = [];\n\n        this.state.grouprolesdata.forEach(role => {\n            if (role.label.toLocaleLowerCase().indexOf(this.state.roleFilterText.toLocaleLowerCase()) > -1) {\n                filteredgrouproles.push(role);\n            }\n        })\n\n        this.setState({\n            filteredgrouprolesdata: filteredgrouproles\n        });\n\n        return filteredgrouproles;\n    }\n\n    populateData() {\n        const getdata = `\n            query {\n                Groups {\n                    GROUP_ID\n                    GROUP_NAME\n                    CREATED_BY\n                    MODIFIED_BY\n                    CREATED_DATE\n                    MODIFIED_DATE\n                },\n\n                Roles {\n                    ROLE_ID\n                    ROLE_NAME\n                },\n\n                groupRoles {\n                    GROUP_ROLE_ID\n                    GROUP_ID\n                    GROUP {\n                        GROUP_ID\n                        GROUP_NAME\n                        CREATED_BY\n                        MODIFIED_BY\n                        CREATED_DATE\n                        MODIFIED_DATE\n                    },\n                    ROLE {\n                        ROLE_ID\n                        ROLE_NAME\n                    },\n                    ACTIVE\n                    READ_PERMISSION\n                    CREATE_PERMISSION\n                    UPDATE_PERMISSION\n                    DELETE_PERMISSION\n                    PRINT_PERMISSION\n                    APPROVE_PERMISSION\n                    CREATED_DATE\n                    CREATED_BY\n                    MODIFIED_DATE\n                    MODIFIED_BY\n                }\n\n            }\n        `;\n\n        API.getData(getdata)\n            .then(({ data }) => {\n\n                const allrolegroups = data.data.groupRoles;\n                const roleGroups = data.data.Groups;\n                const roles = data.data.Roles;\n\n                const rolesdata = [];\n                const expandedRoles = [];\n\n                roles.forEach(role => {\n\n                    const roledetails = {\n                        value: role.ROLE_ID,\n                        label: role.ROLE_NAME,\n                        children: [\n                            {\n                                value: `${role.ROLE_ID}-READ_PERMISSION`,\n                                label: \"Read\",\n                            },\n                            {\n                                value: `${role.ROLE_ID}-CREATE_PERMISSION`,\n                                label: \"Create\",\n                            },\n                            {\n                                value: `${role.ROLE_ID}-UPDATE_PERMISSION`,\n                                label: \"Update\",\n                            },\n                            {\n                                value: `${role.ROLE_ID}-DELETE_PERMISSION`,\n                                label: \"Delete\",\n                            },\n                            {\n                                value: `${role.ROLE_ID}-PRINT_PERMISSION`,\n                                label: \"Print\",\n                            },\n                            {\n                                value: `${role.ROLE_ID}-APPROVE_PERMISSION`,\n                                label: \"Approve\",\n                            },\n                        ],\n                    };\n\n                    rolesdata.push(roledetails)\n                    expandedRoles.push(role.ROLE_ID);\n                });\n\n                this.setState({\n                    data: roleGroups,\n                    allrolegroups,\n                    rolesdata,\n                    expandedRoles,\n                })\n            }).catch(error => {\n                if (error.response || error.request) {\n                    toastr.error('Error Loading Data', 'Failed to Load Group Data');\n                }\n            })\n\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        if (this.state.InsertUpdate === 'Insert') {\n\n            const addGroupQuery = `\n                mutation{\n                    addGroup(\n                        GROUP_NAME:\"${this.state.GROUP_NAME}\",\n                        CREATED_BY:\"${this.state.CREATED_BY}\",\n                        MODIFIED_BY:\"${this.state.MODIFIED_BY}\",\n                        CREATED_DATE:\"${this.state.CREATED_DATE}\",\n                        MODIFIED_DATE:\"${this.state.MODIFIED_DATE}\"\n                    ){\n                        GROUP_ID\n                    }\n                }\n            `;\n\n            API.create(addGroupQuery)\n                .then(({ data }) => {\n\n                    const GROUP_ID = data.data.addGroup.GROUP_ID;\n                    const allRolesIds = this.state.rolesdata.map(role => role.value);\n                    const groupRoles = [];\n                    let checkedRolesIds = [];\n                    let checked_roles = {};\n\n                    this.state.checkedRoles.forEach(role => {\n                        const splitrole = role.split('-');\n\n                        if (splitrole[0] in checked_roles && Array.isArray(checked_roles[splitrole[0]])) {\n                            checked_roles[splitrole[0]].push(splitrole[1]);\n                        } else {\n                            const roledetails = {};\n                            roledetails[splitrole[0]] = [splitrole[1]];\n                            checked_roles = { ...checked_roles, ...roledetails };\n                        }\n\n                    });\n\n                    for (const role in checked_roles) {\n                        if (checked_roles.hasOwnProperty(role)) {\n                            checkedRolesIds.push(role);\n                            groupRoles.push(\n                                `\n                                    {\n                                        GROUP_ID: ${ GROUP_ID}, \n                                        ROLE_ID: ${ role}, \n                                        ACTIVE: ${ 1}, \n                                        READ_PERMISSION: ${ checked_roles[role].includes('READ_PERMISSION')===true?1:0},\n                                        CREATE_PERMISSION: ${ checked_roles[role].includes('CREATE_PERMISSION')===true?1:0},\n                                        UPDATE_PERMISSION: ${ checked_roles[role].includes('UPDATE_PERMISSION')===true?1:0},\n                                        DELETE_PERMISSION: ${ checked_roles[role].includes('DELETE_PERMISSION')===true?1:0},\n                                        PRINT_PERMISSION: ${ checked_roles[role].includes('PRINT_PERMISSION')===true?1:0},\n                                        APPROVE_PERMISSION: ${ checked_roles[role].includes('APPROVE_PERMISSION')===true?1:0},\n                                        CREATED_DATE: \"${ this.state.CREATED_DATE}\",\n                                        MODIFIED_DATE: \"${ this.state.MODIFIED_DATE}\",\n                                        CREATED_BY: \"${ this.state.CREATED_BY}\", \n                                        MODIFIED_BY: \"${ this.state.MODIFIED_BY}\"\n                                    }\n                                `\n                            );\n                        }\n                    }\n\n                    const nonCheckedRolesIds = allRolesIds.filter(ROLE_ID => !checkedRolesIds.includes(ROLE_ID));\n\n                    nonCheckedRolesIds.forEach(ROLE_ID => {\n                        groupRoles.push(\n                            `\n                                {\n                                    GROUP_ID: ${ GROUP_ID}, \n                                    ROLE_ID: ${ ROLE_ID}, \n                                    ACTIVE: ${ 0}, \n                                    READ_PERMISSION: ${ 0},\n                                    CREATE_PERMISSION: ${ 0},\n                                    UPDATE_PERMISSION: ${ 0},\n                                    DELETE_PERMISSION: ${ 0},\n                                    PRINT_PERMISSION: ${ 0},\n                                    APPROVE_PERMISSION: ${ 0},\n                                    CREATED_DATE: \"${ this.state.CREATED_DATE}\",\n                                    MODIFIED_DATE: \"${ this.state.MODIFIED_DATE}\",\n                                    CREATED_BY: \"${ this.state.CREATED_BY}\", \n                                    MODIFIED_BY: \"${ this.state.MODIFIED_BY}\"\n                                }\n                            `\n                        );\n                    });\n\n                    const addGroupRoleQuery = `\n                        mutation {\n                            groupRoleBatchInsert (user_roles: [${ groupRoles}]) {                                    \n                                GROUP_ROLE_ID\n                            }\n                        }\n                    `;\n                    //console.log('Group Multiple Insert:', addGroupRoleQuery);\n\n                    API.create(addGroupRoleQuery).then(({ data }) => {\n\n                        this.clearData();\n                        this.handleHide();\n                        this.populateData();\n                        toastr.success('Create Record', 'Record Created Successfully');\n\n                    }).catch(error => {\n                        if (error.response || error.request) {\n                            console.error(error);\n                            toastr.error('Error Creating Data', 'Failed to create groups');\n                        }\n                    });\n\n                }).catch(error => {\n                    if (error.response || error.request) {\n                        toastr.error('Error Loading Data', 'Failed to Load Data');\n                    }\n                })\n        } else {\n\n            let insertGroupRoles = [];\n            let updateGroupRoles = [];\n\n            this.state.grouprolesdata.forEach(role => {\n\n                if (role.hasOwnProperty(\"new\")) {\n                    insertGroupRoles.push(\n                        `\n                            {\n                                GROUP_ID: ${ this.state.GROUP_ID},\n                                ROLE_ID: ${ role.value},\n                                ACTIVE: ${ this.state.checkedRoles.includes(role.value + \"-READ_PERMISSION\")===true?1:0 || this.state.checkedRoles.includes(role.value + \"-CREATE_PERMISSION\")===true?1:0 || this.state.checkedRoles.includes(role.value + \"-UPDATE_PERMISSION\")===true?1:0 || this.state.checkedRoles.includes(role.value + \"-DELETE_PERMISSION\")===true?1:0}, \n                                READ_PERMISSION: ${ this.state.checkedRoles.includes(role.value + \"-READ_PERMISSION\")===true?1:0},\n                                CREATE_PERMISSION: ${ this.state.checkedRoles.includes(role.value + \"-CREATE_PERMISSION\")===true?1:0},\n                                UPDATE_PERMISSION: ${ this.state.checkedRoles.includes(role.value + \"-UPDATE_PERMISSION\")===true?1:0},\n                                DELETE_PERMISSION: ${ this.state.checkedRoles.includes(role.value + \"-DELETE_PERMISSION\")===true?1:0},\n                                PRINT_PERMISSION: ${ this.state.checkedRoles.includes(role.value + \"-PRINT_PERMISSION\")===true?1:0},\n                                APPROVE_PERMISSION: ${ this.state.checkedRoles.includes(role.value + \"-APPROVE_PERMISSION\")===true?1:0},\n                                CREATED_DATE: \"${ this.state.CREATED_DATE}\",\n                                MODIFIED_DATE: \"${ this.state.MODIFIED_DATE}\",\n                                CREATED_BY: \"${ this.state.CREATED_BY}\", \n                                MODIFIED_BY: \"${ this.state.MODIFIED_BY}\"\n                            }\n                        `\n                    );\n                } else {\n                    updateGroupRoles.push(\n                        `\n                            {\n                                GROUP_ROLE_ID: ${ role.value},\n                                GROUP_ID: ${ this.state.GROUP_ID},\n                                ACTIVE: ${ this.state.checkedRoles.includes(role.value + \"-READ_PERMISSION\")===true?1:0 || this.state.checkedRoles.includes(role.value + \"-CREATE_PERMISSION\")===true?1:0 || this.state.checkedRoles.includes(role.value + \"-UPDATE_PERMISSION\")===true?1:0 || this.state.checkedRoles.includes(role.value + \"-DELETE_PERMISSION\")===true?1:0}, \n                                READ_PERMISSION: ${ this.state.checkedRoles.includes(role.value + \"-READ_PERMISSION\")===true?1:0},\n                                CREATE_PERMISSION: ${ this.state.checkedRoles.includes(role.value + \"-CREATE_PERMISSION\")===true?1:0},\n                                UPDATE_PERMISSION: ${ this.state.checkedRoles.includes(role.value + \"-UPDATE_PERMISSION\")===true?1:0},\n                                DELETE_PERMISSION: ${ this.state.checkedRoles.includes(role.value + \"-DELETE_PERMISSION\")===true?1:0},\n                                PRINT_PERMISSION: ${ this.state.checkedRoles.includes(role.value + \"-PRINT_PERMISSION\")===true?1:0},\n                                APPROVE_PERMISSION: ${ this.state.checkedRoles.includes(role.value + \"-APPROVE_PERMISSION\")===true?1:0},\n                                CREATED_DATE: \"${ this.state.CREATED_DATE}\",\n                                MODIFIED_DATE: \"${ this.state.MODIFIED_DATE}\",\n                                CREATED_BY: \"${ this.state.CREATED_BY}\", \n                                MODIFIED_BY: \"${ this.state.MODIFIED_BY}\"\n                            }\n                        `\n                    );\n                }\n            });\n\n            const updateQueries = `\n                mutation {\n                    updateGroup(\n                        GROUP_ID:${this.state.GROUP_ID},\n                        GROUP_NAME:\"${this.state.GROUP_NAME}\",\n                        MODIFIED_BY:\"${this.state.MODIFIED_BY}\",\n                        MODIFIED_DATE:\"${this.state.MODIFIED_DATE}\"\n                    ){\n                        GROUP_ID\n                    }\n                    \n                    groupRoleBatchUpdate (user_roles: [${ updateGroupRoles}]) {                                    \n                        GROUP_ROLE_ID\n                    }\n\n                    groupRoleBatchInsert (user_roles: [${ insertGroupRoles}]) {                                    \n                        GROUP_ROLE_ID\n                    }\n                }\n            `;\n\n            console.log('Update Groups',updateQueries);\n\n            API.update(updateQueries).then(({ data }) => {\n                this.clearData();\n                this.handleHide();\n                this.populateData();\n                toastr.info('Update Record', 'Record Updated Successfully');\n            }).catch(error => {\n                console.error(error)\n                if (error.response || error.request) {\n                    toastr.error('Error Updating Data', 'Failed to update record');\n                }\n            })\n        }\n\n    }\n\n    handleDelete = (event) => {\n        event.preventDefault();\n\n        const formDelete = `\n            mutation{\n                deleteGroup(\n                    GROUP_ID:${this.state.GROUP_ID}\n                ){\n                    GROUP_ID\n                }\n            }\n        `;\n\n        API.remove(formDelete)\n            .then(() => {\n                this.handleHideDelete();\n                this.populateData();\n                toastr.warning('Delete Record', 'Record Deleted Successfully');\n            }).catch(error => {\n                if (error.response || error.request) {\n                    toastr.error('Error Loading Data', 'Failed to Load Data');\n                }\n            })\n\n    }\n\n    handleEditData = (e) => {\n\n        const groupRoles = this.state.allrolegroups.filter(role => role.GROUP_ID === e.GROUP_ID);\n        \n        const groupRolesIds = groupRoles.map(role => role.ROLE.ROLE_ID);\n\n        let firstRoles = [];\n        let lastRoles = [];\n        let checkedRoles = [];\n        let expandedRoles = [];\n        let newRolesRoles = [];\n\n        if (groupRoles.length !== this.state.rolesdata.length) {\n            this.state.rolesdata.forEach(role => {\n                expandedRoles.push(role.value);\n                if (!groupRolesIds.includes(role.value)) {\n                    newRolesRoles.push({ ...role, new: true });\n                }\n            });\n        }\n\n        groupRoles.forEach(group_role => {\n\n            let roledetails = {\n                value: group_role.GROUP_ROLE_ID,\n                label: group_role.ROLE.ROLE_NAME,\n                children: [\n                    {\n                        value: `${group_role.GROUP_ROLE_ID}-READ_PERMISSION`,\n                        label: \"read\"\n                    },\n                    {\n                        value: `${group_role.GROUP_ROLE_ID}-CREATE_PERMISSION`,\n                        label: \"create\"\n                    },\n                    {\n                        value: `${group_role.GROUP_ROLE_ID}-UPDATE_PERMISSION`,\n                        label: \"update\"\n                    },\n                    {\n                        value: `${group_role.GROUP_ROLE_ID}-DELETE_PERMISSION`,\n                        label: \"delete\"\n                    },\n                    {\n                        value: `${group_role.GROUP_ROLE_ID}-PRINT_PERMISSION`,\n                        label: \"print\"\n                    },\n                    {\n                        value: `${group_role.GROUP_ROLE_ID}-APPROVE_PERMISSION`,\n                        label: \"approve\"\n                    }\n                ],\n            };\n\n            if (group_role.READ_PERMISSION) checkedRoles.push(`${group_role.GROUP_ROLE_ID}-READ_PERMISSION`);\n            if (group_role.CREATE_PERMISSION) checkedRoles.push(`${group_role.GROUP_ROLE_ID}-CREATE_PERMISSION`);\n            if (group_role.UPDATE_PERMISSION) checkedRoles.push(`${group_role.GROUP_ROLE_ID}-UPDATE_PERMISSION`);\n            if (group_role.DELETE_PERMISSION) checkedRoles.push(`${group_role.GROUP_ROLE_ID}-DELETE_PERMISSION`);\n            if (group_role.PRINT_PERMISSION) checkedRoles.push(`${group_role.GROUP_ROLE_ID}-PRINT_PERMISSION`);\n            if (group_role.APPROVE_PERMISSION) checkedRoles.push(`${group_role.GROUP_ROLE_ID}-APPROVE_PERMISSION`);\n\n            group_role.ACTIVE ? firstRoles.push(roledetails) : lastRoles.push(roledetails);\n\n            expandedRoles.push(group_role.GROUP_ROLE_ID);\n        });\n\n        const grouprolesdata = [...firstRoles, ...lastRoles, ...newRolesRoles];\n\n        this.setState({\n            GROUP_ID: e.GROUP_ID,\n            GROUP_NAME: e.GROUP_NAME,\n            grouprolesdata,\n            checkedRoles,\n            expandedRoles,\n            show: true,\n            InsertUpdate: 'Update'\n        })\n    }\n\n    handleDeleteData = (e) => {\n        this.setState({\n            GROUP_ID: e.GROUP_ID,\n            GROUP_NAME: e.GROUP_NAME,\n            showdelete: true,\n            InsertUpdate: 'Delete'\n        })\n    }\n\n    clearData() {\n        this.setState({\n            GROUP_ID: 0,\n            GROUP_NAME: '',\n        })\n    }\n\n    handleFilter = (e) => {\n        let value = e.target.value\n        let data = this.state.data\n        let filteredData = this.state.filteredData\n        this.setState({ value });\n\n        if (value.length) {\n            filteredData = data.filter(item => {\n                let startsWithCondition =\n                    item.GROUP_NAME.toString().toLowerCase().startsWith(value.toLowerCase())\n\n                let includesCondition =\n                    item.GROUP_NAME.toString().toLowerCase().includes(value.toLowerCase())\n\n                if (startsWithCondition) {\n                    return startsWithCondition\n                } else if (!startsWithCondition && includesCondition) {\n                    return includesCondition\n                } else return null\n            })\n            this.setState({ filteredData })\n        }\n    }\n\n    render() {\n        const { data, columns, value, filteredData } = this.state\n        return (\n            <>\n                <Helmet><title>Groups</title></Helmet>\n\n                <React.Fragment>\n                    <Breadcrumbs\n                        breadCrumbTitle=\"Security\"\n                        breadCrumbParent=\"Groups\"\n                        breadCrumbActive=\"Groups\"\n                    />\n                    <Row>\n                        <Col sm=\"12\">\n                            <Card>\n                                <CardHeader>\n                                    <CardTitle>Groups</CardTitle>\n                                </CardHeader>\n                                <CardBody className=\"rdt_Wrapper\">\n\n                                    <GroupsTable\n                                        role={this.constructor.name}\n                                        handleEdit={this.handleEditData}\n                                        handleDelete={this.handleDeleteData}\n                                        value={value}\n                                        data={data}\n                                        columns={columns}\n                                        filteredData={filteredData}\n                                        handleShow={this.handleShow}\n                                        handleFilter={this.handleFilter}\n                                    />\n\n                                    <GroupsModal\n                                        show={this.state.show}\n                                        handleHide={this.handleHide}\n                                        InsertUpdate={this.state.InsertUpdate}\n                                        handleSubmit={this.handleSubmit}\n                                        group_name={this.state.GROUP_NAME}\n                                        changegroup_name={e => this.setState({ GROUP_NAME: e.target.value })}\n                                        showdelete={this.state.showdelete}\n                                        handleHideDelete={this.handleHideDelete}\n                                        handleDelete={this.handleDelete}\n\n                                        grouprolesdata={this.state.grouprolesdata}\n                                        filteredgrouprolesdata={this.state.filteredgrouprolesdata}\n\n                                        roleFilterText={this.state.roleFilterText}\n\n                                        checkedRoles={this.state.checkedRoles}\n                                        expandedRoles={this.state.expandedRoles}\n\n                                        onFilterRolesChange={e => this.setState({ roleFilterText: e.target.value }, this.filterRolesTree)}\n                                        handleCheckRole={checkedRoles => this.setState({ checkedRoles })}\n                                        handleExpandRole={expandedRoles => this.setState({ expandedRoles })}\n                                    />\n\n\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </React.Fragment>\n\n            </>\n\n        )\n    }\n}\n\nconst mapStateToProps = ({ auth: { user } }) => ({\n    user\n});\n\nexport default (connect(mapStateToProps)(Groups));"],"sourceRoot":""}