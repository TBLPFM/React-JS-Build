{"version":3,"sources":["utility/permissions/ability.js","utility/permissions/can.js","components/@vuexy/breadCrumbs/BreadCrumb.js","views/pages/MainDataTable/TableCustomHeader.js","utility/dateAndTime.js","views/pages/Security/Users/Tables/UsersTable.js","views/pages/Security/Users/Modals/UsersModal.js","views/pages/Security/Users/Users.js"],"names":["currentAuthUser","ability","Ability","AbilityBuilder","can","rules","defineRulesFor","user","USER_GROUPS","canArr","length","forEach","user_group","GROUP_ROLES","group_role","ACTIVE","READ_PERMISSION","push","ROLE","ROLE_NAME","CREATE_PERMISSION","UPDATE_PERMISSION","DELETE_PERMISSION","PRINT_PERMISSION","APPROVE_PERMISSION","generateUserAbilities","store","getState","auth","update","createCanBoundTo","BreadCrumbs","className","this","props","breadCrumbTitle","tag","to","size","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","active","breadCrumbActive","color","style","left","right","React","Component","TableCustomHeader","I","a","role","passThrough","allowed","Ripple","disabled","onClick","handleShow","value","onChange","e","handleFilter","ShowDate","today","Date","dd","String","getDate","padStart","mm","getMonth","getFullYear","UsersTable","tableProperties","columns","name","cell","row","Button","handleEdit","handleDelete","selector","sortable","FIRST_NAME","USER_NAME","EMAIL","data","filteredData","noHeader","pagination","subHeader","striped","subHeaderComponent","UsersModal","Modal","show","onHide","handleHide","Header","closeButton","Title","id","InsertUpdate","Form","onSubmit","handleSubmit","autoComplete","Body","Row","Group","as","Col","md","controlId","Label","isMulti","options","groupOptions","handleGroupChange","closeMenuOnSelect","defaultValue","checkedGroups","Control","type","placeholder","first_name","changefirst_name","required","user_name","changeuser_name","Email","changeEmail","passwd","changePassword","Footer","variant","isEnabled","showdelete","handleHideDelete","readOnly","Users","event","preventDefault","state","addAppUserQuery","PASSWORD_HASH","CREATED_DATE","MODIFIED_DATE","CREATEDBY","MODIFIEDBY","API","then","USER_ID","addAppUser","userGroups","checkedgroups","group","addUserGroupQuery","clearData","populateData","toastr","success","catch","error","response","request","insertUserGroups","deleteUserGroups","userGroupsIds","checkedGroupIds","usergroupsdata","GROUP","GROUP_ID","addedUserGroups","filter","includes","removedUserGroups","groupid","userGroupId","usergroup","USER_GROUP_ID","updateAppUserQuery","console","log","info","formDelete","r","warning","handleEditData","label","GROUP_NAME","setState","groupoptions","groupsdata","handleDeleteData","handleShowUserGroups","popoverOpen","handleCloseSearch","locationid","locationname","opensearch","target","item","startsWithCondition","toString","toLowerCase","startsWith","includesCondition","handleSearchFilter","searchdata","searchFilteredData","searchvalue","_Date","searchcolumns","handleShowSearch","handleHideSearch","Groups","appUsers","userAssignedGroups","Helmet","Fragment","sm","Card","CardHeader","CardTitle","CardBody","constructor","connect"],"mappings":"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","file":"static/js/61.0cb11ba0.chunk.js","sourcesContent":["\nimport { Ability, AbilityBuilder } from '@casl/ability';\n\nimport { store } from '../../redux/storeConfig/store'\n\nconst ability = new Ability([])\nconst { can, rules } = new AbilityBuilder();\n\nfunction generateUserAbilities(USER_GROUPS) {\n  let canArr = [];\n\n  if (USER_GROUPS.length > 0) {\n    USER_GROUPS.forEach(user_group => {\n      if (user_group.GROUP_ROLES.length > 0) {\n        user_group.GROUP_ROLES.forEach(group_role => {\n          if (group_role.ACTIVE){\n            if (group_role.READ_PERMISSION) { canArr.push(can(\"read\", group_role.ROLE.ROLE_NAME, group_role.READ_PERMISSION)); }\n            if (group_role.CREATE_PERMISSION) { canArr.push(can(\"create\", group_role.ROLE.ROLE_NAME, group_role.CREATE_PERMISSION)); }\n            if (group_role.UPDATE_PERMISSION) { canArr.push(can(\"update\", group_role.ROLE.ROLE_NAME, group_role.UPDATE_PERMISSION)); }\n            if (group_role.DELETE_PERMISSION) { canArr.push(can(\"delete\", group_role.ROLE.ROLE_NAME, group_role.DELETE_PERMISSION)); }\n            if (group_role.PRINT_PERMISSION) { canArr.push(can(\"print\", group_role.ROLE.ROLE_NAME, group_role.PRINT_PERMISSION)); }\n            if (group_role.APPROVE_PERMISSION) { canArr.push(can(\"approve\", group_role.ROLE.ROLE_NAME, group_role.APPROVE_PERMISSION)); }\n          }\n        });\n      }\n    });\n  }\n\n  return canArr;\n}\n\nfunction defineRulesFor(user) {\n  //console.log(user);\n  if (user) {\n    generateUserAbilities(user.USER_GROUPS)\n  }\n\n  return rules\n}\n\nlet currentAuthUser;\n(() => {\n  const prevAuth = currentAuthUser;\n  currentAuthUser = store.getState().auth.user;\n\n  if (prevAuth !== currentAuthUser) {\n    ability.update(defineRulesFor(currentAuthUser));\n  }\n})();\n\nexport default ability;","import { createCanBoundTo } from '@casl/react';\nimport ability from './ability';\n \nexport default createCanBoundTo(ability)","import React from \"react\"\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from \"reactstrap\"\nimport { Home, Settings } from \"react-feather\"\nimport { NavLink } from \"react-router-dom\"\nclass BreadCrumbs extends React.Component {\n  render() {\n    return (\n      <div className=\"content-header row\">\n        <div className=\"content-header-left col-md-9 col-12\">\n          <div className=\"row breadcrumbs-top\">\n            <div className=\"col-12\">\n              {this.props.breadCrumbTitle ? (\n                <h2 className=\"content-header-title float-left mb-0\">\n                  {this.props.breadCrumbTitle}\n                </h2>\n              ) : (\n                \"\"\n              )}\n              <div className=\"breadcrumb-wrapper vx-breadcrumbs d-sm-block d-none col-12\">\n                <Breadcrumb tag=\"ol\">\n                  <BreadcrumbItem tag=\"li\">\n                    <NavLink to=\"/\">\n                      <Home className=\"align-top\" size={15} />\n                    </NavLink>\n                  </BreadcrumbItem>\n                  <BreadcrumbItem tag=\"li\" className=\"text-primary\">\n                    {this.props.breadCrumbParent}\n                  </BreadcrumbItem>\n                  {this.props.breadCrumbParent2 ? (\n                    <BreadcrumbItem tag=\"li\" className=\"text-primary\">\n                      {this.props.breadCrumbParent2}\n                    </BreadcrumbItem>\n                  ) : (\n                    \"\"\n                  )}\n                  {this.props.breadCrumbParent3 ? (\n                    <BreadcrumbItem tag=\"li\" className=\"text-primary\">\n                      {this.props.breadCrumbParent3}\n                    </BreadcrumbItem>\n                  ) : (\n                    \"\"\n                  )}\n                  <BreadcrumbItem tag=\"li\" active>\n                    {this.props.breadCrumbActive}\n                  </BreadcrumbItem>\n                </Breadcrumb>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"content-header-right text-md-right col-md-3 col-12 d-md-block d-none\">\n          <div className=\"breadcrum-right dropdown\">\n            <UncontrolledButtonDropdown>\n              <DropdownToggle\n                color=\"primary\"\n                size=\"sm\"\n                className=\"btn-icon btn-round dropdown-toggle\"\n              >\n                <Settings\n                  size={14}\n                  style={{\n                    left: 0\n                  }}\n                />\n              </DropdownToggle>\n              <DropdownMenu tag=\"ul\" right>\n                <DropdownItem tag=\"li\">\n                  <NavLink className=\"text-dark w-100\" to=\"/chat\">\n                    Chat\n                  </NavLink>\n                </DropdownItem>\n                <DropdownItem tag=\"li\">\n                  <NavLink className=\"text-dark w-100\" to=\"/email/inbox\">\n                    Email\n                  </NavLink>\n                </DropdownItem>\n                <DropdownItem tag=\"li\">\n                  <NavLink className=\"text-dark w-100\" to=\"/calendar\">\n                    Calendar\n                  </NavLink>\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledButtonDropdown>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default BreadCrumbs\n","\nimport React from \"react\"\nimport {\n  Input,\n  Button,\n} from \"reactstrap\"\nimport { Search } from \"react-feather\"\nimport Can from '../../../utility/permissions/can';\n\nconst TableCustomHeader = props => {\n  return (\n    <div className=\"d-flex flex-wrap justify-content-between w-100\">\n      <div className=\"add-new\">\n      <Can I=\"create\" a={props.role} passThrough>\n          { allowed => <Button.Ripple disabled={!allowed} className=\"mr-1 mb-1 bg-gradient-primary round\" color=\"none\" onClick={props.handleShow}>Add New</Button.Ripple> }\n        </Can>\n      </div>\n      <div className=\"position-relative has-icon-left mb-1\">\n        <Input value={props.value} onChange={e => props.handleFilter(e)} />\n        <div className=\"form-control-position\">\n          <Search size=\"15\" />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TableCustomHeader\n","\nexport function ShowDate() {\n\n  let today = new Date();\n  let dd = String(today.getDate()).padStart(2, '0');\n  let mm = String(today.getMonth() + 1).padStart(2, '0');\n  let yyyy = today.getFullYear();\n\n  return yyyy + '-' + mm + '-' + dd;\n}\n\n\nexport function ShowTime() {\n\n  let today = new Date();\n  let time = today.getHours() + \":\" + today.getMinutes();\n\n  return time;\n}\n","import React from \"react\"\nimport {\n    Button\n} from \"reactstrap\"\nimport DataTable from \"react-data-table-component\"\nimport TableCustomHeader from \"../../../MainDataTable/TableCustomHeader\";\nimport { Edit, Trash2 } from \"react-feather\"\n\nimport Can from '../../../../../utility/permissions/can';\n\nclass UsersTable extends React.Component {\n\n    tableProperties = {\n        columns: [\n            {\n                name: \"Action\",\n                cell: (row) => (\n                    <>\n                        <Can I=\"update\" a={this.props.role} passThrough>\n                            { allowed => \n                                <Button.Ripple className=\"mr-1 mb-1 bg-gradient-success\" size=\"sm\" color=\"none\"\n                                    disabled={!allowed}\n                                    onClick={() => this.props.handleEdit(row)}\n                                >\n                                    <Edit size={14} />\n                                </Button.Ripple>\n                            }\n                        </Can>\n\n                        <Can I=\"delete\" a={this.props.role} passThrough>\n                            { allowed => \n                                <Button.Ripple className=\"mr-1 mb-1  bg-gradient-danger\" size=\"sm\" color=\"none\"\n                                    disabled={!allowed}\n                                    onClick={() => this.props.handleDelete(row)}\n                                ><Trash2 size={14} />\n                                </Button.Ripple>\n                            }\n                        </Can>\n\n                        {/* <Button.Ripple className=\"mr-1 mb-1 bg-gradient-success\" size=\"sm\" color=\"none\"\n                            onClick={() => this.props.handleEdit(row)}\n                        >\n                            <Edit size={14} />\n                        </Button.Ripple>\n\n                        <Button.Ripple className=\"mr-1 mb-1  bg-gradient-danger\" size=\"sm\" color=\"none\"\n                            onClick={() => this.props.handleDelete(row)}\n                        ><Trash2 size={14} />\n                        </Button.Ripple> */}\n                    </>\n                )\n            },\n            {\n                name: \"First Name\",\n                selector: \"fullname\",\n                sortable: true,\n                cell: row => <p className=\"mb-0\">{row.FIRST_NAME}</p>\n            },\n            {\n                name: \"Username\",\n                selector: \"USER_NAME\",\n                sortable: true,\n                cell: row => <p className=\"mb-0\">{row.USER_NAME}</p>\n            },\n            {\n                name: \"Email\",\n                selector: \"EMAIL\",\n                sortable: true,\n                cell: row => <p className=\"mb-0\">{row.EMAIL}</p>\n            }\n        ]\n    }\n\n    render() {\n\n        return (\n            <>\n                <DataTable\n                    className=\"dataTable-custom\"\n                    data={this.props.value.length ? this.props.filteredData : this.props.data}\n                    columns={this.tableProperties.columns}\n                    noHeader\n                    pagination\n                    subHeader\n                    striped\n                    subHeaderComponent={\n                        <TableCustomHeader role={this.props.role} value={this.props.value} handleShow={this.props.handleShow} handleFilter={this.props.handleFilter} />\n                    }\n                />\n            </>\n\n        )\n    }\n}\n\n\nexport default UsersTable","import React from 'react';\nimport Select from 'react-select'\nimport { Button, Modal, Form, Col, //InputGroup \n} from 'react-bootstrap';\n//import { Search } from 'react-feather';\n\nclass UsersModal extends React.Component {\n    render() {\n        return (\n            <div>\n                <Modal\n                    show={this.props.show}\n                    onHide={this.props.handleHide}\n                    size=\"lg\"\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"AddUpdate\">\n                            {this.props.InsertUpdate} User\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Form onSubmit={this.props.handleSubmit} autoComplete=\"off\">\n                        <Modal.Body>\n\n                            <Form.Row>\n                                {/* <Form.Group as={Col} md=\"6\" controlId=\"Location\">\n                                    <Form.Label>Location</Form.Label>\n                                    <InputGroup>\n                                        <Form.Control\n                                            type=\"text\"\n                                            value={this.props.locationname}\n                                            onChange={this.props.handleChangeLocation}\n                                            placeholder=\"Search Location\"\n                                            aria-describedby=\"inputGroupPrepend\"\n                                            required\n                                            readOnly\n                                        />\n                                        <InputGroup.Prepend>\n                                            <Button variant=\"info\" size=\"sm\" onClick={this.props.handleShowSearch}>\n                                                <Search />\n                                            </Button>\n                                        </InputGroup.Prepend>\n                                    </InputGroup>\n                                </Form.Group> */}\n                                \n                                <Form.Group as={Col} md=\"12\" controlId=\"UserGroups\">\n                                    <Form.Label>User Group(s)</Form.Label>\n                                    <Select \n                                        isMulti\n                                        options={this.props.groupOptions} \n                                        onChange={this.props.handleGroupChange}\n                                        closeMenuOnSelect={false}\n                                        defaultValue={this.props.checkedGroups}\n                                        \n                                    />\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group as={Col} md=\"6\" controlId=\"FirstName\">\n                                    <Form.Label>First Name</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"Enter First Name\" value={this.props.first_name} onChange={this.props.changefirst_name} required />\n                                </Form.Group>\n                                <Form.Group as={Col} md=\"6\" controlId=\"user_name\">\n                                    <Form.Label>Username</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"Enter User Name\" value={this.props.user_name} onChange={this.props.changeuser_name} required />\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group as={Col} md=\"6\" controlId=\"email\">\n                                    <Form.Label>Email</Form.Label>\n                                    <Form.Control type=\"email\" placeholder=\"Enter Email\" value={this.props.Email} onChange={this.props.changeEmail} required />\n                                </Form.Group>\n                                <Form.Group as={Col} md=\"6\" controlId=\"password\">\n                                    <Form.Label>Password</Form.Label>\n                                    <Form.Control type=\"password\" placeholder=\"Enter Password\" value={this.props.passwd} onChange={this.props.changePassword} />\n                                </Form.Group>\n                            </Form.Row>\n\n                        </Modal.Body>\n\n                        <Modal.Footer>\n                            <Button variant=\"success\" onClick={this.props.handleHide}>\n                                Cancel\n                            </Button>\n                            <Button variant=\"primary\" type=\"submit\" disabled={this.props.isEnabled}>\n                                {this.props.InsertUpdate}\n                            </Button>\n                        </Modal.Footer>\n                    </Form>\n                </Modal>\n\n                <Modal\n                    show={this.props.showdelete}\n                    onHide={this.props.handleHideDelete}\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"AddUpdate\">\n                            Delete Employee\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Form onSubmit={this.props.handleDelete} autoComplete=\"off\">\n                        <Modal.Body>\n                            <Form.Group controlId=\"cat_description_del\">\n                                <h4>Are you sure you want to delete this record?</h4>\n                                <Form.Control type=\"text\" placeholder=\"Click Delete Button\" value={this.props.user_name} onChange={this.props.changeuser_name} readOnly />\n                            </Form.Group>\n                        </Modal.Body>\n\n                        <Modal.Footer>\n                            <Button variant=\"success\" onClick={this.props.handleHideDelete}>\n                                Cancel\n                            </Button>\n                            <Button variant=\"primary\" type=\"submit\">\n                                Yes Delete\n                            </Button>\n                        </Modal.Footer>\n                    </Form>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default UsersModal;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Helmet } from 'react-helmet';\nimport { Card, CardBody, CardHeader, CardTitle, Row, Col } from \"reactstrap\"\nimport Breadcrumbs from \"../../../../components/@vuexy/breadCrumbs/BreadCrumb\"\nimport UsersTable from './Tables/UsersTable';\nimport UsersModal from './Modals/UsersModal';\n\nimport * as API from \"../../../../utility/crud/app.crud\";\nimport * as _Date from \"../../../../utility/dateAndTime\";\nimport { toastr } from 'react-redux-toastr'\n\nclass Users extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: [],\n            data: [],\n            filteredData: [],\n            groupsdata: [],\n            checkedgroups: [],\n            groupoptions: [],\n            usergroupsdata: [],\n            value: '',\n            show: false,\n            showdelete: false,\n            popoverOpen: false,\n\n            USER_ID: '',\n            USER_NAME: '',\n            EMAIL: '',\n            PASSWORD_HASH:'',\n            FIRST_NAME: '',\n            locationid: '',\n            locationname: '',\n\n            CREATEDBY: props.user.EMAIL,\n            MODIFIEDBY: props.user.EMAIL,\n            CREATED_DATE: _Date.ShowDate(),\n            MODIFIED_DATE: _Date.ShowDate(),\n            InsertUpdate: '',\n\n            opensearch: false,\n\n            searchcolumns: [],\n            searchdata: [],\n            searchFilteredData: [],\n            searchvalue: '',\n\n        }\n\n        this.handleShow = () => {\n            this.setState({\n                groupoptions: this.state.groupsdata,\n                show: true,\n                InsertUpdate: 'Insert'\n            });\n            this.clearData();\n        }\n\n        this.handleHide = () => {\n            this.setState({\n                show: false,\n                groupoptions: [],\n                checkedgroups: [],\n            });\n        }\n\n        this.handleHideDelete = () => {\n            this.setState({\n                showdelete: false\n            });\n        }\n\n        this.handleShowSearch = () => {\n            this.setState({ opensearch: true });\n        };\n\n        this.handleHideSearch = () => {\n            this.setState({ opensearch: false });\n        };\n\n        this.populateData();\n\n    }\n\n    populateData() {\n        const getdata = `\n            query{\n                appUsers {\n                    USER_ID\n                    USER_NAME\n                    EMAIL\n                    FIRST_NAME\n                    USER_GROUPS {\n                        GROUP {\n                            GROUP_ID\n                            GROUP_NAME\n                        }\n                    }\n                    CREATED_DATE\n                    CREATEDBY\n                    MODIFIED_DATE\n                    MODIFIEDBY\n                },\n\n                Groups {\n                    GROUP_ID\n                    GROUP_NAME\n                },\n\n                userAssignedGroups {\n                    USER_GROUP_ID\n                    USER_ID\n                    GROUP_ID\n                    GROUP {\n                        GROUP_ID\n                        GROUP_NAME\n                    }\n                }\n            }\n        `;\n\n        API.getData(getdata)\n            .then(({ data }) => {\n                const Groups = data.data.Groups;\n                \n                let groupsdata = [];\n\n                Groups.forEach(group => {\n                    groupsdata.push({ \n                        label: group.GROUP_NAME, \n                        value: group.GROUP_ID\n                    })\n                });\n                \n                this.setState({\n                    data: data.data.appUsers,\n                    usergroupsdata: data.data.userAssignedGroups,\n                    groupsdata\n                })\n            }).catch(error => {\n                if (error.response || error.request) {\n                    toastr.error('Error Loading Data', 'Failed to USER Load Data');\n                }\n            })\n\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        if (this.state.InsertUpdate === 'Insert') {\n\n            const addAppUserQuery = `\n                mutation {\n                    addAppUser (\n                        USER_NAME: \"${this.state.USER_NAME}\",\n                        PASSWORD_HASH: \"${this.state.PASSWORD_HASH}\",\n                        EMAIL: \"${this.state.EMAIL}\",\n                        FIRST_NAME: \"${this.state.FIRST_NAME}\",\n                        CREATED_DATE: \"${this.state.CREATED_DATE}\",\n                        MODIFIED_DATE: \"${this.state.MODIFIED_DATE}\",\n                        CREATEDBY: \"${this.state.CREATEDBY}\",\n                        MODIFIEDBY: \"${this.state.MODIFIEDBY}\",\n                    ){\n                        USER_ID\n                    }\n                }\n            `;\n            \n\n            API.create(addAppUserQuery)\n                .then(({data}) => {\n\n                    const USER_ID = data.data.addAppUser.USER_ID\n\n                    const userGroups = [];\n\n                    this.state.checkedgroups.forEach(group => {\n                        userGroups.push(\n                            `\n                                {\n                                    USER_ID: ${ USER_ID },\n                                    GROUP_ID: ${ group.value }, \n                                    CREATED_DATE: \"${ this.state.CREATED_DATE }\",\n                                    MODIFIED_DATE: \"${ this.state.MODIFIED_DATE }\",\n                                    CREATED_BY: \"${ this.state.CREATEDBY }\", \n                                    MODIFIED_BY: \"${ this.state.MODIFIEDBY }\"\n                                }\n                            `\n                        )\n                    })\n\n                    const addUserGroupQuery = `\n                            mutation {\n                                userAssignedGroupBatchInsert (user_groups: [${ userGroups }]) {                                    \n                                    USER_GROUP_ID\n                                }\n                            }\n                        `;\n                        \n                    API.create(addUserGroupQuery)\n                        .then(() => {\n                            this.clearData();\n                            this.handleHide();\n                            this.populateData();\n                            toastr.success('Create Record', 'Record Created Successfully');\n                        }).catch(error => {\n                            if (error.response || error.request) {\n                                toastr.error('Error Loading Data', 'Failed to Load Data');\n                            }\n                        })\n\n                }).catch(error => {\n                    if (error.response || error.request) {\n                        toastr.error('Error Loading Data', 'Failed to Load Data');\n                    }\n                })\n        } else {\n\n            const USER_ID = this.state.USER_ID;\n\n            let insertUserGroups = [];\n            let deleteUserGroups = [];\n            let userGroups = [];\n            let userGroupsIds = [];\n            let checkedGroupIds = [];\n\n            this.state.usergroupsdata.forEach(group => {\n                if(group.USER_ID === USER_ID) {\n                    userGroups.push(group)\n                    userGroupsIds.push(group.GROUP.GROUP_ID)\n                }\n            });\n\n            this.state.checkedgroups.forEach(group => {\n                checkedGroupIds.push(group.value)\n            })\n\n            const addedUserGroups = this.state.checkedgroups.filter(group => !userGroupsIds.includes(group.value))\n            const removedUserGroups = userGroupsIds.filter(groupid => !checkedGroupIds.includes(groupid))\n\n            addedUserGroups.forEach(group => {\n                insertUserGroups.push(\n                    `\n                        {\n                            USER_ID: ${ USER_ID },\n                            GROUP_ID: ${ group.value }, \n                            CREATED_DATE: \"${ this.state.CREATED_DATE }\",\n                            MODIFIED_DATE: \"${ this.state.MODIFIED_DATE }\",\n                            CREATED_BY: \"${ this.state.CREATEDBY }\", \n                            MODIFIED_BY: \"${ this.state.MODIFIEDBY }\"\n                        }\n                    `\n                )\n            })\n\n            removedUserGroups.forEach(groupid => {\n                const userGroupId = userGroups.filter(usergroup => usergroup.GROUP.GROUP_ID === groupid)[0].USER_GROUP_ID;\n                deleteUserGroups.push(\n                    `\n                        {\n                            USER_GROUP_ID: ${ userGroupId },\n                        }\n                    `\n                )\n            })\n\n            const updateAppUserQuery = `\n                mutation{\n                    updateAppUser (\n                        USER_ID: ${USER_ID},\n                        USER_NAME: \"${this.state.USER_NAME}\",\n                        PASSWORD_HASH: \"${this.state.PASSWORD_HASH}\",\n                        EMAIL: \"${this.state.EMAIL}\",\n                        FIRST_NAME: \"${this.state.FIRST_NAME}\",\n                        MODIFIED_DATE: \"${this.state.MODIFIED_DATE}\",\n                        MODIFIEDBY: \"${this.state.MODIFIEDBY}\"\n                    ){\n                        USER_ID\n                    }\n                    \n                    userAssignedGroupBatchInsert (user_groups: [${ insertUserGroups }]) {                                    \n                        USER_GROUP_ID\n                    }\n\n                    userAssignedGroupBatchDelete (user_groups: [${ deleteUserGroups }]) {                                    \n                        USER_GROUP_ID\n                    }\n                }\n            `;\n            console.log('Update User', updateAppUserQuery);\n\n            API.update(updateAppUserQuery)\n                .then(() => {\n                    this.clearData();\n                    this.handleHide();\n                    this.populateData();\n                    toastr.info('Update Record', 'Record Updated Successfully');\n                }).catch(error => {\n                    if (error.response || error.request) {\n                        toastr.error('Error Updating Data', 'Failed to Update Data');\n                    }\n                })\n        }\n\n    }\n\n    handleDelete = (event) => {\n        event.preventDefault();\n\n        const formDelete = `\n            mutation{\n                deleteAppUser(\n                    USER_ID:${this.state.USER_ID}\n                    ){\n                    USER_ID\n                }\n            }\n        `;\n        \n        API.remove(formDelete)\n            .then((r) => {\n                this.handleHideDelete();\n                this.populateData();\n                toastr.warning('Delete Record', 'Record Deleted Successfully');\n            }).catch(error => {\n                if (error.response || error.request) {\n                    toastr.error('Error Loading Data', 'Failed to Load Data');\n                }\n            })\n\n    }\n\n    handleEditData = (e) => {\n\n        const userGroups = [];\n        \n        this.state.usergroupsdata.forEach(group => {\n            if(group.USER_ID === e.USER_ID) {\n                userGroups.push({ \n                    label: group.GROUP.GROUP_NAME, \n                    value: group.GROUP.GROUP_ID\n                })\n            }\n        });\n\n        this.setState({\n            USER_ID: e.USER_ID,\n            EMAIL: e.EMAIL,\n            FIRST_NAME: e.FIRST_NAME,\n            USER_NAME: e.USER_NAME,\n            groupoptions: this.state.groupsdata,\n            checkedgroups: userGroups,\n            show: true,\n            InsertUpdate: 'Update'\n        })\n    }\n\n    handleDeleteData = (e) => {\n        this.setState({\n            USER_ID: e.USER_ID,\n            FIRST_NAME: e.FIRST_NAME,\n            USER_NAME: e.USER_NAME,\n            showdelete: true,\n            InsertUpdate: 'Delete'\n        })\n    }\n\n    handleShowUserGroups = e => {\n        //console.log(e)\n        this.setState({\n            popoverOpen: !this.state.popoverOpen,\n        })\n    }\n\n    clearData() {\n        this.setState({\n            USER_ID: '',\n            USER_NAME: '',\n            EMAIL: '',\n            FIRST_NAME: '',\n            PASSWORD_HASH:'',\n        })\n    }\n\n    handleCloseSearch = (e) => {\n        this.setState({\n            locationid: e.locationid,\n            locationname: e.locationname,\n            opensearch: false,\n        });\n    };\n\n    handleFilter = (e) => {\n        let value = e.target.value\n        let data = this.state.data\n        let filteredData = this.state.filteredData\n        this.setState({ value });\n\n        if (value.length) {\n            filteredData = data.filter(item => {\n                let startsWithCondition =\n                    item.FIRST_NAME.toString().toLowerCase().startsWith(value.toLowerCase()) ||\n                    item.EMAIL.toString().toLowerCase().startsWith(value.toLowerCase()) ||\n                    item.USER_NAME.toString().toLowerCase().startsWith(value.toLowerCase())\n\n                let includesCondition =\n                    item.FIRST_NAME.toString().toLowerCase().includes(value.toLowerCase()) ||\n                    item.EMAIL.toString().toLowerCase().includes(value.toLowerCase()) ||\n                    item.USER_NAME.toString().toLowerCase().includes(value.toLowerCase())\n\n                if (startsWithCondition) {\n                    return startsWithCondition\n                } else if (!startsWithCondition && includesCondition) {\n                    return includesCondition\n                } else return null\n            })\n            this.setState({ filteredData })\n        }\n    }\n\n    handleSearchFilter = (e) => {\n        let value = e.target.value\n        let data = this.state.searchdata\n        let searchFilteredData = this.state.searchFilteredData\n        this.setState({ searchvalue: value });\n\n        if (value.length) {\n            searchFilteredData = data.filter(item => {\n                let startsWithCondition = item.locationname.toString().toLowerCase().startsWith(value.toLowerCase())\n\n                let includesCondition = item.locationname.toString().toLowerCase().includes(value.toLowerCase())\n\n                if (startsWithCondition) {\n                    return startsWithCondition\n                } else if (!startsWithCondition && includesCondition) {\n                    return includesCondition\n                } else return null\n            })\n            this.setState({ searchFilteredData })\n        }\n    }\n\n    handleGroupChange = (checkedgroups) => {\n        this.setState({\n            checkedgroups: checkedgroups ? checkedgroups : []\n        });\n    }\n\n    render() {\n        const { data, value, filteredData } = this.state\n        return (\n            <>\n                <Helmet><title>Users</title></Helmet>\n\n                <React.Fragment>\n                    <Breadcrumbs\n                        breadCrumbTitle=\"Security\"\n                        breadCrumbParent=\"Home\"\n                        breadCrumbActive=\"Users\"\n                    />\n                    <Row>\n                        <Col sm=\"12\">\n                            <Card>\n                                <CardHeader>\n                                    <CardTitle>Users</CardTitle>\n                                </CardHeader>\n                                <CardBody className=\"rdt_Wrapper\">\n\n                                    <UsersTable\n                                        role={this.constructor.name}\n                                        handleEdit={this.handleEditData}\n                                        handleDelete={this.handleDeleteData}\n                                        handleShowUserGroups={this.handleShowUserGroups}\n                                        value={value}\n                                        data={data}\n                                        filteredData={filteredData}\n                                        handleShow={this.handleShow}\n                                        handleFilter={this.handleFilter}\n                                        popoverOpen={this.state.popoverOpen}\n                                    />\n\n                                    <UsersModal\n                                        show={this.state.show}\n                                        handleHide={this.handleHide}\n                                        InsertUpdate={this.state.InsertUpdate}\n                                        handleSubmit={this.handleSubmit}\n                                        handleShowSearch={this.handleShowSearch}\n\n                                        groupOptions={this.state.groupoptions}\n                                        checkedGroups={this.state.checkedgroups}\n                                        handleGroupChange={this.handleGroupChange}\n\n                                        first_name={this.state.FIRST_NAME}\n                                        changefirst_name={e => this.setState({FIRST_NAME: e.target.value })}\n\n                                        user_name={this.state.USER_NAME}\n                                        changeuser_name={e => this.setState({USER_NAME: e.target.value })}\n                                        \n                                        Email={this.state.EMAIL}\n                                        changeEmail={e => this.setState({EMAIL: e.target.value })}\n\n                                        changePassword={e => this.setState({PASSWORD_HASH: e.target.value })}\n\n                                        showdelete={this.state.showdelete}\n                                        handleHideDelete={this.handleHideDelete}\n                                        handleDelete={this.handleDelete}\n                                    />\n\n\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </React.Fragment>\n\n            </>\n\n        )\n    }\n}\n\nconst mapStateToProps = ({ auth: { user } }) => ({\n    user\n});\n\nexport default (connect(mapStateToProps)(Users));"],"sourceRoot":""}